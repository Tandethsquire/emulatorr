devtools::document()
devtools::build()
devtools::load_all('.')
?Correlator
u <- Correlator$new(uvar, uexp)
u$get_exp(0)
em <- Emulator$new(basis_f, beta, u)
devtools::document()
devtools::build()
devtools::load_all('.')
em <- Emulator$new(basis_f, beta, u)
em <- Emulator$new(basis_f, beta, u, 0)
em <- Emulator$new(basis_f, beta, u)
?Emulator
devtools::document()
devtools::build()
?Emulator
em <- Emulator$new(basis_f, beta, u)
library(emulatorr)
?Emulator
em <- Emulator$new(basis_f, beta, u)
library(emulatorr)
em <- Emulator$new(basis_f, beta, u)
library(emulatorr)
?Emulator
em <- Emulator$new(basis_f, beta, u)
devtools::document()
devtools::build()
?Correlatir
?Correlator
uexp = function(x) 0
uvar = function(x,xp) 0.36*exp_sq(x,xp,0.1)
u <- Correlator$new(uvar, uexp)
basis_f <- c(function(x) 1, function(x) x[[1]], function(x) x[[2]])
beta_s <- list(mu = c(0.1,0.2,-0.1), sigma = diag(0, nrow = 3))
em <- Emulator$new(basis_f, beta_s, u)
em
devtools::document()
devtools::build()
em <- Emulator$new(basis_f, beta_s, u)
devtools::document()
devtools::build()
em <- Emulator$new(basis_f, beta_s, u)
devtools::document()
devtools::build()
em <- Emulator$new(basis_f, beta_s, u)
devtools::document()
devtools::build()
em <- Emulator$new(basis_f, beta_s, u)
devtools::document()
devtools::build()
em <- Emulator$new(basis_f, beta_s, u)
devtools::document()
devtools::build()
em <- Emulator$new(basis_f, beta_s, u)
devtools::document()
devtools::build()
em <- Emulator$new(basis_f, beta_s, u)
devtools::document()
devtools::build()
em <- Emulator$new(basis_f, beta_s, u)
devtools::document()
devtools::build()
em <- Emulator$new(basis_f, beta_s, u)
devtools::document()
devtools::build()
em <- Emulator$new(basis_f, beta_s, u)
devtools::document()
em <- Emulator$new(basis_f, beta_s, u)
em <- Emulator$new(basis_f, beta_s, u)
devtools::build()
em <- Emulator$new(basis_f, beta_s, u)
em$get_exp(c(0.1,0.1))
?Emulator
devtools::document()
devtools::build()
em <- Emulator$new(basis_f, beta_s, u)
devtools::document()
devtools::build()
em <- Emulator$new(basis_f, beta_s, u)
u$get_exp(1)
uexp <- function(x) 1
u <- Correlator$new(uvar,uexp)
u$get_exp(1)
basis_f
beta_s$mu
beta_s$sigma
em <- Emulator$new(basis_f, beta_s, u)
em$get_exp(c(0.1,0.2))
em$get_var(c(0.1,0.2))
data = data.frame(x=c(1,2,3), y=c(3,2,1), z=c(0.1,0.3,-0.3))
tst <- em$bayes_adjust(inputs=data[,c(1,2)], outputs=data[,3])
data = data.frame(x=c(1,2,3), y=c(-1,2,1), z=c(0.1,0.3,-0.3))
tst <- em$bayes_adjust(inputs=data[,c(1,2)], outputs=data[,3])
tst$get_exp(c(-1,1))
tst$get_exp(c(1,-1))
tst$get_exp(c(3,1))
tst$get_var(c(3,1))
tst$get_var(c(-1,1))
tst$get_var(c(1,-1))
tst$get_var(c(2,2))
tst$get_exp(c(-1,1))
tst$get_exp(c(1,-1))
u$exp_func <- function(x) 0
em <- Emulator$new(basis_f, beta_s, u)
newem <- em$bayes_adjust(data[,c(1,2)],data[,3])
newem$get_exp(c(-1,1))
newem$get_exp(c(1,-1))
newem$get_var(c(1,-1))
newem$get_var(c(2,2))
tst$get_Var(c(0.1,0.2))
tst$get_var(c(0.1,0.2))
em$get_var(c(0.1,0.2))
rm(list=ls())
regression_specifications = list(mu = c(0.1, 0.2, -0.1), sigma = diag(0, nrow=3))
basis_functions = c(function(x) 1, function(x) x[[1]], function(x) x[[2]])
u_exp <- function(x) 0
u_cov <- function(x, xp) 0.36 * exp_sq(x, xp, 0.1)
correlation_structure = Correlator$new(u_cov, u_exp)
mixed_covariance = function(x) rep(0, length(beta$mu))
mixed_covariance
mixed_covariance(0)
length(beta$mu)
beta$mu
mixed_covariance = function(x) rep(0, length(regression_sepcifications$mu))
mixed_covariance(0)
mixed_covariance = function(x) rep(0, length(regression_specifications$mu))
mixed_covariance(0)
library(emulatorr)
?Emulator
?lm
?Emulator
devtools::document()
devtools::document()
devtools::build()
?emulator_from_data
library(emulatorr)
setwd("~/RProjectStuff")
inputdata <- read.csv("GillespieSIR/GillespieData.csv", header=TRUE, sep=',')
View(inputdata)
in_names = c('aSI','aIR', 'aSR')
out_names = c('nS', 'nR', 'nI')
ranges = list(c(0.1,0.8), c(0, 0.5), c(0, 0.05))
ems < - emulators_from_data(input_data = inputdata, input_names = in_names, output_names = out_names, ranges = ranges, c_lengths = c(0.1,0.085, 0.075))
ems <- emulators_from_data(input_data = inputdata, input_names = in_names, output_names = out_names, ranges = ranges, c_lengths = c(0.1,0.085, 0.075))
ems <- emulator_from_data(input_data = inputdata, input_names = in_names, output_names = out_names, ranges = ranges, c_lengths = c(0.1,0.085, 0.075))
library(emulatorr)
ems <- emulator_from_data(input_data = inputdata, input_names = in_names, output_names = out_names, ranges = ranges, c_lengths = c(0.1,0.085, 0.075))
library(emulatorr)
?emulator_from_data
library(emulatorr)
?emulator_from_data
ems <- emulator_from_data(input_data = inputdata, input_names = in_names, output_names = out_names, ranges = ranges, c_lengths = c(0.1,0.085, 0.075))
library(emulatorr)
?emulator_from_data
ems <- emulator_from_data(input_data = inputdata, input_names = in_names, output_names = out_names, ranges = ranges, c_lengths = c(0.1,0.085, 0.075))
library(emulatorr)
ems <- emulator_from_data(input_data = inputdata, input_names = in_names, output_names = out_names, ranges = ranges, c_lengths = c(0.1,0.085, 0.075))
devtools::document()
setwd("~/RProjectStuff/emulatorr")
devtools::document()
devtools::load_all('.')
ems <- emulator_from_data(input_data = inputdata, input_names = in_names, output_names = out_names, ranges = ranges, c_lengths = c(0.1,0.085, 0.075))
ems[[1]]$get_exp(c(0.1,0.1,0.01))
in_data <- read.csv("SampleData.csv", header = T, sep = ',')
in_data <- read.csv("R/SampleData.csv", header = T, sep = ',')
save(in_data, file="data/sampleData.RData")
devtools::document()
devtools::build()
devtools::document()
devtools::build()
library(emulatorr)
sampleData
devtools::use_data_raw()
devtools::load_all()
sampleData
devtools::use_data(sampleData)
devtools::document()
devtools::build()
sampleData
data("sampleData.RData")
data("data/sampleData.RData")
data(sampleData)
View(data(sampleData))
View(data('sampleData'))
rm(in_data)
library(emulatorr)
sampleData
devtools::use_data_raw()
devtools::use_data()
devtools::document()
load("C:/Users/tqxh68/Documents/RProjectStuff/emulatorr/data/GillespieSIR.RData")
View(in_data)
save(in_data, file="data/GillespieSIR.rda")
rm(in_data)
load("~/RProjectStuff/emulatorr/data/GillespieSIR.rda")
GillespieSIR <-in_data
save(GillespieSIR, "data/GillespieSIR.rda")
View(GillespieIR)
View(GillespieSIR)
save(GillespieSIR, "data/GillespieSIR.rda")
save(GillespieSIR, "data/GillespieSIR.rda")
save(GillespieSIR, file="data/GillespieSIR.rda")
rm(GillespieSIR)
library(emulatorr)
View(GillespieSIR)
rm_in_data
rm(in_data)
?emulator_from_data
emulator_from_data(input_data = GillespieSIR, input_names = c("aSI", "aIR", "aSR"), output_names = c("nS", "nI", "nR"), ranges = list(c(0.1,0.8),c(0,0.5),c(0,0.05)), c_lengths = c(0.1, 0.085, 0.075))
emulators <- emulator_from_data(input_data = GillespieSIR, input_names = c("aSI", "aIR", "aSR"), output_names = c("nS", "nI", "nR"), ranges = list(c(0.1,0.8),c(0,0.5),c(0,0.05)), c_lengths = c(0.1, 0.085, 0.075))
emulators[[1]]$get_exp(c(0.4,0.25,0.025))
emulators[[1]]$get_var(c(0.4,0.25,0.025))
newem <- emulators[[1]]$bayes_adjust(GillespieSIR[,c("aSI", "aIR", "aSR")])
newem <- emulators[[1]]$bayes_adjust(GillespieSIR[,c("aSI", "aIR", "aSR")], GillespieSIR$nS)
devtools::build()
emulators <- emulator_from_data(input_data = GillespieSIR, input_names = c("aSI", "aIR", "aSR"), output_names = c("nS", "nI", "nR"), ranges = list(c(0.1,0.8),c(0,0.5),c(0,0.05)), c_lengths = c(0.1, 0.085, 0.075))
emulators[[1]]
emulators[[1]]$get_exp(c(0.4,0.25,0.025))
emulators[[1]]$get_Var(c(0.4,0.25,0.025))
emulators[[1]]$get_var(c(0.4,0.25,0.025))
?Emulator
u_exp <- function(x) 0
u_cov <- function(x,xp) 0.36*exp_sq(x,xp,0.1)
u <- Correlator$new(u_cov, u_exp)
bf <- c(function(x) 1, function(x) x[[1]], function(x) x[[2]])
be <- list(mu = c(0.1,0.2,-0.1), sigma=diag(0, nrow=3))
em <- Emulator$new(bf, be, u)
em$get_exp(c(0.1,0.2))
em$get_var(c(0.1,0.2))
data <- data.frame(x = c(1,2,3), y = c(-1,2,1), z = c(0.1,0.3,-0.3))
newem <- em$bayes_adjust(data[,1:2], data[,3])
newem$get_exp(c(1,-1))
newem$get_var(c(1,-1))
emulators[[1]]$beta
tem <- emulators[[1]]
tem$beta$sigma
tem$beta$bucov
tem$bucov
tem
tem$beta_u_cov(0)
tem$u$get_exp(c(0.1,0.1,0.1))
tem$u$get_var(c(0.1,0.1,0.1))
tem$u$get_cov(c(0.1,0.1,0.1))
purrr::map(seq_along(1:3), diag(0, nrow=3))
purrr::map(seq_along(1:3), ~diag(0, nrow=3))
devtools::document()
devtools::build()
emulators <- emulator_from_data(input_data = GillespieSIR, input_names = c("aSI", "aIR", "aSR"), output_names = c("nS", "nI", "nR"), ranges = list(c(0.1,0.8),c(0,0.5),c(0,0.05)), c_lengths = c(0.1, 0.085, 0.075))
emulators[[1]]$get_var(c(0.4,0.25,0.025))
new_ems <- purrr::map(seq_along(emulators), ~emulators[[.x]]$bayes_adjust(GillespieSIR[,1:3], GillespieSIR[,.x+3]))
new_ems
new_ems[[1]]$get_exp(c(0.4,0.25,0.025))
new_ems[[1]]$get_var(c(0.4,0.25,0.025))
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
library(emulatorr)
?Emulator
?emulator_from_data
library(emulatorr)
ems <- emulator_from_data(input_data = GillespieSIR, input_names = c("aSI","aIR","aSR"), output_names = c("nS","nI","nR"), ranges = c(0.1,0.8),c(0,0.5), c(0.,0.05), c_lengths = c(0.1,0.085,0.075))
ems <- emulator_from_data(input_data = GillespieSIR, input_names = c("aSI","aIR","aSR"), output_names = c("nS","nI","nR"), ranges = c(0.1,0.8),c(0,0.5), c(0,0.05), c_lengths = c(0.1,0.085,0.075))
ems <- emulator_from_data(input_data = GillespieSIR, input_names = c("aSI","aIR","aSR"), output_names = c("nS","nI","nR"), ranges = list(c(0.1,0.8),c(0,0.5), c(0,0.05)), c_lengths = c(0.1,0.085,0.075))
newems <- map(seq_along(ems), ~ems[[.x]]$bayes_adjust(GillespieSIR[,c(1:3)], GillespieSIR[,.x+3]))
newems <- purrr::map(seq_along(ems), ~ems[[.x]]$bayes_adjust(GillespieSIR[,c(1:3)], GillespieSIR[,.x+3]))
newems[[1]]$beta
newems[[2]]$beta$mu
newems[[3]]$beta$mu
library(emulatorr)
mysig = diag(0, nrow=3)
betaspecs <- list(list(mu=c(508,-616,863,-5616), sigma=mysig), list(mu=c(287,251,-1029,-705), sigma=mysig), list(mu=c(183,429,191,6058),sigma=mysig))
tstems <- emulator_from_data(GillespieSIR, c("nSI","nIR","nSR"), c("nS","nI","nR"), list(c(0.1,0.8),c(0,0.5),c(0,0.05)), betaspecs, c_lengths=c(0.1,0.085,0.075))
tstems <- emulator_from_data(GillespieSIR, c("aSI","aIR","aSR"), c("nS","nI","nR"), list(c(0.1,0.8),c(0,0.5),c(0,0.05)), betaspecs, c_lengths=c(0.1,0.085,0.075))
library(emulatorr)
tstems <- emulator_from_data(GillespieSIR, c("aSI","aIR","aSR"), c("nS","nI","nR"), list(c(0.1,0.8),c(0,0.5),c(0,0.05)), betaspecs, c_lengths=c(0.1,0.085,0.075))
tstems[[1]]$get_exp
tstems[[1]]$get_exp(c(0.4,0.25,0.025))
tstems[[1]]$get_var(c(0.4,0.25,0.025))
for (i in 1:3) {
betaspecs[[i]]$sigma = diag(0,nrow=4)
}
betaspecs
tstems <- emulator_from_data(GillespieSIR, c("aSI","aIR","aSR"), c("nS","nI","nR"), list(c(0.1,0.8),c(0,0.5),c(0,0.05)), betaspecs, c_lengths=c(0.1,0.085,0.075))
tstems$get_Var(c(0.4,0.25,0.025))
tstems$get_var(c(0.4,0.25,0.025))
tstems[[1]]$get_var(c(0.4,0.25,0.025))
ems[[1]]$u$get_exp(c(0.4,0.25,0.025))
ems[[1]]$u$get_cov(c(0.4,0.25,0.025))
ems[[2]]$u$get_cov(c(0.4,0.25,0.025))
ems[[3]]$u$get_cov(c(0.4,0.25,0.025))
ems[[1]]$u$get_cov(c(0.4,0.25,0.025)) %>% sqrt
sqrt(ems[[1]]$u$get_cov(c(0.4,0.25,0.025)))
sqrt(ems[[2]]$u$get_cov(c(0.4,0.25,0.025)))
sqrt(ems[[3]]$u$get_cov(c(0.4,0.25,0.025)))
correlators <- list(
list(sigma = 94.548, mu = 0, theta = 0.1, corr = exp_sq),
list(sigma = 113.299, mu = 0, theta = 0.085, corr = exp_sq),
list(sigma = 144.198, mu = 0, theta = 0.075, corr = exp_sq)
)
in_v <- c("aSI","aIR","aSR")
out_v <- c("nS","nI","nR")
testems <- emulator_from_data(GillespieSIR,in_v,out_v,beta=betaspecs,u=correlators)
library(emulatorr)
testems <- emulator_from_data(GillespieSIR,in_v,out_v,beta=betaspecs,u=correlators)
library(emulatorr)
testems <- emulator_from_data(GillespieSIR,in_v,out_v,beta=betaspecs,u=correlators)
for (i in 1:3)
correlators[[i]]$mu = function(x) 0
correlators[[1]]
testems <- emulator_from_data(GillespieSIR,in_v,out_v,beta=betaspecs,u=correlators)
corrs <- purrr::map(model_u, ~Correlator$new(function(x, y) .x$sigma^2*.x$corr_func(x, y, .x$theta), .x$mu_func))
corrs <- purrr::map(correlators, ~Correlator$new(function(x, y) .x$sigma^2*.x$corr_func(x, y, .x$theta), .x$mu_func))
corrs <- purrr::map(correlators, ~Correlator$new(function(x, y) .x$sigma^2*.x$corr_func(x, y, .x$theta), .x$mu))
correlators[[1]]$corr(1,1)
correlators[[1]]$corr(1,1,0.1)
corrs <- purrr::map(correlators, ~Correlator$new(function(x, y) .x$sigma^2*.x$corr(x, y, .x$theta), .x$mu))
corrs[[1]]$get_cov(0)
correlators
library(emulatorr)
testems <- emulator_from_data(GillespieSIR,in_v,out_v,beta=betaspecs,u=correlators)
testems[[1]]$get_var(c(0.4,0.25,0.025))
testems[[1]]$get_exp(c(0.4,0.25,0.025))
checkems <- emulator_from_data(GillespieSIR, in_v, out_v)
checkems <- emulator_from_data(GillespieSIR, in_v, out_v, ranges = list(c(0.1,0.8),c(0,0.5),c(0,0.05)))
library(emulatorr)
checkems <- emulator_from_data(GillespieSIR, in_v, out_v, ranges = list(c(0.1,0.8),c(0,0.5),c(0,0.05)))
library(emulatorr)
checkems <- emulator_from_data(GillespieSIR, in_v, out_v, ranges = list(c(0.1,0.8),c(0,0.5),c(0,0.05)))
library(emulatorr)
checkems <- emulator_from_data(GillespieSIR, in_v, out_v, ranges = list(c(0.1,0.8),c(0,0.5),c(0,0.05)))
checkems[[1]]$get_exp(c(0.4,0.1,0))
checkems[[1]]$bayes_adjust(GillespieSIR[,in_v], GillespieSIR[,out_v])
checkems[[1]]$bayes_adjust(GillespieSIR[,in_v], GillespieSIR[,out_v[[1]]])
correlators
betaspecs
tst <- emulator_from_data(GillespieSIR, in_v, out_v, beta=betaspecs, u=correlators)
tst[[1]]
tst[[1]]$get_exp(c(0,0,0,))
tst[[1]]$get_exp(c(0,0,0))
library(emulatorr)
?emulator_from_data
devtools::document()
devtools::build()
?emulator_from_data
library(emulatorr)
?emulator_from_data
getwd()
validate <- read.csv("../GillespieSIR/GillespieValidation.csv", header=T, sep=",")
View(validate)
GillespieValidation <- validate
save(GillespieValidation, file="data/GillespieValidation.rda")
library(emulatorr)
GillespieValidatiojn
GillespieValidatioin
GillespieValidation
inputdata <- GillespieData
inputdata <- GillespieSIR
valdata <- GillespieValidation
in_vars <- c("aSI","aIR","aSR")
out_vars <- c("nS","nI","nR")
c_lengths <- c(0.1,0.085,0.075)
ems <- emulator_from_data(inputdata, in_vars, out_vars, c_lengths = c_lengths)
ems[[1]]$get_exp(c(0.4,0.25,0.025))
ems[[1]]$get_var(c(0.4,0.25,0.025))
newems <- purrr::map(seq_along(ems), ~ems[[.x]]$bayes_adjust(inputdata[,in_vars],inputdata[,out_vars[[.x]]]))
newems[[1]]$get_exp(c(0.4,0.25,0.025))
newems$get_Var(c(0.4,0.25,0.025))
newems$get_var(c(0.4,0.25,0.025))
newems[[1]]$get_var(c(0.4,0.25,0.025))
devtools::document(_)
devtools::document()
devtools::build()
library(emulatorr)
standard_errors(newems, GillespieValidation[,in_vars], GillespieValidation[,"nS"], "nS")
standard_errors(newems[[1]], GillespieValidation[,in_vars], GillespieValidation[,"nS"], "nS")
library(emulatorr)
standard_errors(newems[[1]], GillespieValidation[,in_vars], GillespieValidation[,"nS"], "nS")
devtools::document()
devtools::build()
library(emulatorr)
diagnostics(newems[[1]], GillespieValidation[,in_vars], GillespieValidation[,'nS'],list(c(0.1,0.8),c(0,0.5),c(0,0.05)))
library(emulatorr)
diagnostics(newems[[1]], GillespieValidation[,in_vars], GillespieValidation[,'nS'],list(c(0.1,0.8),c(0,0.5),c(0,0.05)))
devtools::document
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
library(emulatorr)
diagnostics(newems[[1]], GillespieValidation[,in_vars], GillespieValidation[,'nS'],list(c(0.1,0.8),c(0,0.5),c(0,0.05)))
comparison_diagnostics(newems[[1]], GillespieValidation[,in_vars], GillespieValidation[,'nS'],c(0,1000))
devtools::document()
devtools::build()
comparison_diagnostics(newems[[1]], GillespieValidation[,in_vars], GillespieValidation[,'nS'],c(0,1000))
comparison_diagnostics(newems[[1]], GillespieValidation[,in_vars], GillespieValidation[,'nS'],list(c(0,1000),c(0,1000))
)
library(emulatorr)
comparison_diagnostics(newems[[1]], GillespieValidation[,in_vars], GillespieValidation[,'nS'],list(c(0,1000),c(0,1000)))
library(emulatorr)
comparison_diagnostics(newems[[1]], GillespieValidation[,in_vars], GillespieValidation[,'nS'],list(c(0,1000),c(0,1000)),2)
comparison_diagnostics(newems[[1]], GillespieValidation[,in_vars], GillespieValidation[,'nS'],list(c(0,1000),c(0,1000)),2.5)
?emulatorr
library(emulatorr)
lsf.str
lsf.str("package:emulatorr")
z <- 16
is.numeric(z)
z <- c(1,3,2)
is.numeric(z)
z = list(val = 2, sigma = 0.1)
is.numeric(z)
library(emulatorr)
u_exp <- function(x) 0
u_var <- function(x,xp) 0.36*exp_sq(x,xp,0.1)
u <- Correlator$new(u_var, u_exp)
?Emulator
bf <- c(function(x) 1, function(x) x[[1]], function(x) x[[2]])
beta_mu <- c(0.1,0.2,-0.1)
beta_sigma <- diag(0, nrow=3)
em <- Emulator$new(funcs = bf, beta = list(beta_mu, beta_sigma), u = u)
em$get_exp(0)
em$get_exp(c(0,0,0))
em$get_exp(c(0,0))
em <- Emulator$new(funcs = bf, beta = list(mu=beta_mu, sigma=beta_sigma), u = u)
em$get_exp(c(0,0))
em$get_var(c(0,0))
em$implausibility(c(0,0), 1)
library(emulatorr)
em <- Emulator$new(funcs = bf, beta = list(mu=beta_mu, sigma=beta_sigma), u = u)
em$implausibility(c(0,0), 1)
em$implausibility(c(0,0), list(val=1, sigma=0.1))
devtools::document()
devtools::build()
?Emulator
devtools::document()
devtools::build()
?Emulator
library(emulatorr)
?classification_error
in_vars <- c("aSI","aIR","aSR")
outvars <- c("nS", "nI", "nR")
c_lengths <- c(0.1,0.085,0.075)
bems <- emulator_from_data(GillespieSIR, in_vars, out_vars, c_lengths = c_lengths)
bems <- emulator_from_data(GillespieSIR, in_vars, out_vars,_ c_lengths = c_lengths)
out_vars <- c("nS", "nI", "nR")
bems <- emulator_from_data(GillespieSIR, in_vars, out_vars,_ c_lengths = c_lengths)
bems <- emulator_from_data(GillespieSIR, in_vars, out_vars, c_lengths = c_lengths)
tems <- purrr::map(seq_along(bems, ~tems[[.x]]$bayes_adjust(GillespieSIR[,in_vars], GillespieSIR[,out_Vars[[.x]]]))
)
tems <- purrr::map(seq_along(bems), ~tems[[.x]]$bayes_adjust(GillespieSIR[,in_vars], GillespieSIR[,out_Vars[[.x]]]))
tems <- purrr::map(seq_along(bems), ~bems[[.x]]$bayes_adjust(GillespieSIR[,in_vars], GillespieSIR[,out_vars[[.x]]]))
tems[[1]]$get_exp(c(0,0,0))
tems[[1]]$get_var(c(0,0,0))
target_value = list(val = 281, sigma = 37.26)
classification_error(emulator = tems[[1]], input_points = GillespieValidation[,in_vars], output_points <- GillespieValidation[,'nS'])
classification_error(emulator = tems[[1]], input_points = GillespieValidation[,in_vars], output_points <- GillespieValidation[,'nS'], z= target_value)
devtools::build()
devtools::document()
devtools::build()
classification_error(emulator = tems[[1]], input_points = GillespieValidation[,in_vars], output_points <- GillespieValidation[,'nS'], z= target_value)
devtools::build()
classification_error(emulator = tems[[1]], input_points = GillespieValidation[,in_vars], output_points <- GillespieValidation[,'nS'], z= target_value)
library(emulatorr)
classification_error(emulator = tems[[1]], input_points = GillespieValidation[,in_vars], output_points <- GillespieValidation[,'nS'], z= target_value)
library(emulatorr)
classification_error(emulator = tems[[1]], input_points = GillespieValidation[,in_vars], output_points <- GillespieValidation[,'nS'], z= target_value)
library(emulatorr)
classification_error(emulator = tems[[1]], input_points = GillespieValidation[,in_vars], output_points <- GillespieValidation[,'nS'], z= target_value)
floor(2.5)
?in_vars
target_vals <- c(281, 30, 689)
target_sigmas <- c(37.26, 11.16, 31.72)
z_specs <- purrr::map2(target_vals, target_sigmas, ~list(val=.x, sigma=.y))
nth_implausible(emulators = tems, x = c(0.4, 0.25, 0.025),
z = z_specs, n = 2)
devtools::document()
devtools::build()
target_vals <- c(281, 30, 689)
target_sigmas <- c(37.26, 11.16, 31.72)
z_specs <- purrr::map2(target_vals, target_sigmas, ~list(val=.x, sigma=.y))
nth_implausible(emulators = tems, x = c(0.4, 0.25, 0.025),
z = z_specs, n = 2)
target_vals <- c(281, 30, 689)
target_sigmas <- c(37.26, 11.16, 31.72)
z_specs <- purrr::map2(target_vals, target_sigmas, ~list(val=.x, sigma=.y))
nth_implausible(emulators = tems, x = c(0.4, 0.25, 0.025),
z = z_specs, n = 3)
target_vals <- c(281, 30, 689)
target_sigmas <- c(37.26, 11.16, 31.72)
z_specs <- purrr::map2(target_vals, target_sigmas, ~list(val=.x, sigma=.y))
nth_implausible(emulators = tems, x = c(0.4, 0.25, 0.025),
z = z_specs, n = 1)
target_vals <- c(281, 30, 689)
target_sigmas <- c(37.26, 11.16, 31.72)
z_specs <- purrr::map2(target_vals, target_sigmas, ~list(val=.x, sigma=.y))
nth_implausible(emulators = tems, x = c(0.4, 0.25, 0.025),
z = z_specs, n = 1, max_imp = 0.5)
?nth_implausible
library(emulatorr)
?nth_implausible
getwd()
git init
library(emulatorr)
git init
?git
install.packagaes("git")
install.packages("git")
