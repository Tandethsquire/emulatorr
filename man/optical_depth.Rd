% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/opticaldepth.R
\name{optical_depth}
\alias{optical_depth}
\title{Optical Depth Of Emulator Implausibility}
\usage{
optical_depth(
  targets,
  ranges,
  points_per_dim,
  plot_vars = names(ranges)[1:2],
  emulators = NULL,
  imps = NULL,
  cutoff = 3,
  ...
)
}
\arguments{
\item{targets}{The target values of the outputs, in the normal form}

\item{ranges}{The ranges of the input variables, as a named list}

\item{points_per_dim}{The number of lattice points in each input direction}

\item{plot_vars}{A list of two names, or a single name, corresponding to the plotting inputs}

\item{emulators}{A set of \code{\link{Emulator}} objects}

\item{imps}{If implausibility has already been calculated across a grid, the \code{data.frame} goes here}

\item{cutoff}{The implausibility cutoff. Default: 3}

\item{...}{Any options to be passed to the \code{\link{nth_implausible}} function.}
}
\value{
A \code{data.frame} corresponding to the bins and proportions.
}
\description{
Calculates optical depth of the implausibility of a set of emulators, given target values.
Implausibility is calculated for each (univariate) emulator and the corresponding target
value, and the n-th implausibility is computed. This occurs in a lattice hypercube of size
points_per_dim^n, and all points are put into bins in the two target directions. The optical
depth is the proportion of points in a given bin that are non-implausible.
}
\details{
One or two target directions can be specified.
}
\examples{
 ranges <- list(aSI = c(0.1, 0.8), aIR = c(0, 0.5), aSR = c(0, 0.05))
 out_vars <- c('nS', 'nI', 'nR')
 targets <- list(
  list(val = 281, sigma = 37.26),
  list(val = 30, sigma = 11.16),
  list(val = 689, sigma = 31.72))
 first_ems <- emulator_from_data(GillespieSIR, output_names = out_vars,
  ranges = ranges, quadratic = TRUE)
 trained_ems <- purrr::map(seq_along(first_ems),
  ~first_ems[[.x]]$adjust(GillespieSIR, out_vars[[.x]]))
 optical_depth(targets, ranges, 5, emulators = trained_ems)
 optical_depth(targets, ranges, 5, plot_vars = c('aIR', 'aSR'),
 emulators = trained_ems, cutoff = 4, n = 2, max_imp = 30)
 optical_depth(targets, ranges, 5, plot_vars = 'aSR',
 emulators = trained_ems, cutoff = 2, n = 2)
}
